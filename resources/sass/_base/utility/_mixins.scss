// Layout functions
// Responsive breakpoint manager
@mixin mq($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    } @else {
        @media (#{$breakpoint}) {
            @content;
        }
    }
}

// used for footers that are fixed to the bottom: body has min height of 100% + this height as bottom-padding
@mixin footer-is-fixed($height: 5em) {
    html {
        height: 100%;
    }

    body {
        min-height: 100%;

        .no-touchevents & {
            padding-bottom: $height + 4em; //footer space reserved on desktop

            @include mq(m) {
                padding-bottom: 0; //footer relative on small screen
            }
        }
    }

    .footer {

        &,
        .touchevents & {
            width: 100%;
            z-index: 2;

            @include mq(m) {
                height: auto;
                max-height: none;
            }
        }

        .no-touchevents & {
            bottom: 0;
            left: 0;
            position: absolute;

            @include mq(m) {
                position: relative;
            }
        }
    }
}

// Block reset
@mixin block-reset {
    display: block !important;
    float: none !important;
    margin-left: 0 !important;
    margin-right: 0 !important;
    transform: none !important;
    width: 100% !important;
}

// Position center horizontally in parent
@mixin position-center-horizontal($position: absolute) {
    left: 50%;
    position: $position;
    transform: translateX(-50%);
}

// Position center vertically in parent
@mixin position-center-vertical($position: absolute) {
    position: $position;
    top: 50%;
    transform: translateY(-50%);
}

// Position center both in parent
@mixin position-center($position: absolute) {
    left: 50%;
    position: $position;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
}

// Typography mixins
// Font shortcut for font family and weight
@mixin font($family: sans, $weight: normal) {
    font-family: font-family($family);
    font-weight: font-weight($weight);
}

// Font shortcut for font family and weight
@mixin font-size($size: default) {
    font-size: font-size($size);
}

// style links
@mixin underline($color, $border-color: $color) {
    border-bottom: solid 2px $border-color;
    color: $color;
    text-decoration: none;
    transition: .3s color linear, .3s border-color linear;
}

// style links
@mixin underline-hover($border-color) {

    &:hover {
        border-bottom: solid 2px $border-color;
    }
}

// Set hyphens on
@mixin hyphens($value: true) {
    @if $value == true {
        -moz-hyphens: auto;
        -ms-hyphens: auto;
        -webkit-hyphens: auto;
        hyphens: auto;
    } @else {
        -moz-hyphens: none !important;
        -ms-hyphens: none !important;
        -webkit-hyphens: none !important;
        hyphens: none !important;
    }
}

// Set font-smoothing
@mixin antialiasing($value: subpixel) {
    @if $value == subpixel {
        -webkit-font-smoothing: subpixel-antialiased;
    }
    @if $value == pixel {
        -moz-osx-font-smoothing: grayscale;
        -webkit-font-smoothing: antialiased;
    }
}

// Generate tag around text
@mixin tag($color, $background-color) {
    background-color: $background-color;
    border-radius: border-radius(s);
    color: $color;
    display: inline-block;
    padding: 0 .35em;
}

// Set horizontal ul
@mixin ul-horizontal {
    list-style: none;
    margin: 0;
    padding-left: 0;

    li {
        display: inline-block;
    }
}

@mixin ul-clean {
    list-style: none;
    margin: 0;
    padding-left: 0;
}

// Color mixins
// Linear gradient
@mixin gradient-vertical($start, $stop, $from: 0%, $to: 100%) {
    background: $start; /* old browsers */
    background: -webkit-linear-gradient(top, $start $from, $stop $to); /* Chrome 10-25, Safari 5.1-6 */
    background: linear-gradient(to bottom, $start $from, $stop $to); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
}

// Linear gradient horizontal
@mixin gradient-horizontal($start, $stop, $from: 0%, $to: 100%) {
    background: $start; /* old browsers */
    background: -webkit-linear-gradient(left, $start $from, $stop $to); /* Chrome 10-25, Safari 5.1-6 */
    background: linear-gradient(to right, $start $from, $stop $to); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
}

// Graphic mixins

// Responsive rectangle
@mixin cover() {
    position: absolute;
    display: block;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
}

// Circle
@mixin circle($size, $display: 'inline-block') {
    border-radius: 100%;
    display: inline-block;
    height: $size;
    line-height: $size;
    overflow: hidden;
    text-align: center;
    width: $size;
}

// Square
@mixin square($size, $display: 'inline-block') {
    display: inline-block;
    height: $size;
    line-height: $size;
    overflow: hidden;
    text-align: center;
    width: $size;
}

// Responsive rectangle
@mixin rectangle($aspect-ratio, $display: 'inline-block') {
    display: block;
    height: 0;
    overflow: hidden;
    padding-bottom: $aspect-ratio;
    width: 100%;
}

// Image mixins
// Svg background
@mixin background-svg($image, $background-position: center center, $background-size: contain, $background-repeat: no-repeat) {
    //removed since we don't need png fallbacks anymore right?
    @include background-image($image, $background-position, $background-size, $background-repeat);
}

// Background image
@mixin background-image($image, $background-position: center center, $background-size: contain, $background-repeat: no-repeat) {
    background-image: url('#{$image}');
    background-position: $background-position;
    background-repeat: $background-repeat;
    background-size: $background-size;
}

// Background image with color overlay
@mixin background-image-tinted($image, $rgba, $background-position: center center) {
    background: linear-gradient($rgba, $rgba), url('#{$image}');
    background-position: $background-position;
    background-size: cover;
}

// Form
// Placeholder
@mixin prefixed-placeholder($pseudo:'') {

    @at-root #{$pseudo}::-webkit-input-placeholder {
        @content;
    }

    @at-root #{$pseudo}:-moz-placeholder {
        @content;
    }

    @at-root #{$pseudo}::-moz-placeholder {
        @content;
    }

    @at-root #{$pseudo}:-ms-input-placeholder {
        @content;
    }
}
